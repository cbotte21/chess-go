// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: chess.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChessService_Create_FullMethodName = "/ChessService/Create"
	ChessService_Move_FullMethodName   = "/ChessService/Move"
	ChessService_Update_FullMethodName = "/ChessService/Update"
)

// ChessServiceClient is the client API for ChessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChessServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*Bool, error)
	Update(ctx context.Context, in *Jwt, opts ...grpc.CallOption) (ChessService_UpdateClient, error)
}

type chessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChessServiceClient(cc grpc.ClientConnInterface) ChessServiceClient {
	return &chessServiceClient{cc}
}

func (c *chessServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ChessService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessServiceClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, ChessService_Move_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessServiceClient) Update(ctx context.Context, in *Jwt, opts ...grpc.CallOption) (ChessService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChessService_ServiceDesc.Streams[0], ChessService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chessServiceUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChessService_UpdateClient interface {
	Recv() (*BoardStatus, error)
	grpc.ClientStream
}

type chessServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *chessServiceUpdateClient) Recv() (*BoardStatus, error) {
	m := new(BoardStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChessServiceServer is the server API for ChessService service.
// All implementations must embed UnimplementedChessServiceServer
// for forward compatibility
type ChessServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Move(context.Context, *MoveRequest) (*Bool, error)
	Update(*Jwt, ChessService_UpdateServer) error
	mustEmbedUnimplementedChessServiceServer()
}

// UnimplementedChessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChessServiceServer struct {
}

func (UnimplementedChessServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedChessServiceServer) Move(context.Context, *MoveRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedChessServiceServer) Update(*Jwt, ChessService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedChessServiceServer) mustEmbedUnimplementedChessServiceServer() {}

// UnsafeChessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChessServiceServer will
// result in compilation errors.
type UnsafeChessServiceServer interface {
	mustEmbedUnimplementedChessServiceServer()
}

func RegisterChessServiceServer(s grpc.ServiceRegistrar, srv ChessServiceServer) {
	s.RegisterService(&ChessService_ServiceDesc, srv)
}

func _ChessService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChessService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChessService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChessService_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessServiceServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChessService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Jwt)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChessServiceServer).Update(m, &chessServiceUpdateServer{stream})
}

type ChessService_UpdateServer interface {
	Send(*BoardStatus) error
	grpc.ServerStream
}

type chessServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *chessServiceUpdateServer) Send(m *BoardStatus) error {
	return x.ServerStream.SendMsg(m)
}

// ChessService_ServiceDesc is the grpc.ServiceDesc for ChessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChessService",
	HandlerType: (*ChessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ChessService_Create_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _ChessService_Move_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _ChessService_Update_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chess.proto",
}
